<Defs>
  <QuestScriptDef>
    <defName>CultIntro_Conversion</defName>
    <rootMinPoints>250</rootMinPoints>
    <expireDaysRange>4~8</expireDaysRange>
    <isRootSpecial>true</isRootSpecial>
    <questNameRules>
      <rulesStrings>
        <li>questName->Convert demanded</li>
        <li>questName->The tribute</li>
        <li>questName->The changed</li>
        <li>questName->A [constAdj] demand</li>
        <li>questName->A [trialAdj] [suffix]</li>
        <li>constAdj->changing</li>
        <li>constAdj->metamorphic</li>
        <li>constAdj->changing</li>
        <li>constAdj->morphed</li>
        <li>constAdj->cautious</li>
        <li>trialAdj->test</li>
        <li>trialAdj->show</li>
        <li>trialAdj->display</li>
        <li>trialAdj->trial</li>
        <li>trialAdj->tribute</li>
		<li>suffix->for Ether</li>
		<li>suffix->of faith</li>
      </rulesStrings>
    </questNameRules>
    <questDescriptionRules>
      <rulesStrings>

        <!-- Asker is faction leader -->
        <li>questDescription(asker_factionLeader==True)->[asker_nameFull] of [asker_faction_name] has given a demand to send them tributes. These may be colonists or prisoners, but be careful -- who knows in what state they'll return.</li>

      </rulesStrings>
    </questDescriptionRules>

    <root Class="QuestNode_Sequence">
      <nodes>
        <li Class="QuestNode_SubScript">
          <def>Util_RandomizePointsChallengeRating</def>
        </li>

        <!-- Calculate colonist count to lend -->
        <!-- make this a single, non morphed, pawn -->
        <li Class="PawnmorpherCult.Quests.GetConvertablePawn">
          <storeAs>convert</storeAs>
          <mustBeColonist>true</mustBeColonist>
        </li>

        <li Class="QuestNode_GetMapOf">
          <mapOf>$convert</mapOf>
        </li>

        <!-- End if map removed before the quest is accepted -->
        <li Class="QuestNode_End">
          <inSignal>map.MapRemoved</inSignal>
          <outcome>Fail</outcome>
          <signalListenMode>NotYetAcceptedOnly</signalListenMode>
        </li>

        <li Class="QuestNode_GeneratePawn">
          <kindDef>EtherCult_Ranked_Wimp</kindDef>
          <storeAs>asker</storeAs>
          <faction>EtherCult</faction>
        </li>

        <!-- Get asker and assign some related text -->
        <!-- Decide the dutyDescription and entertainerDescriptions so we can use the same text in several letters -->


        <li Class="QuestNode_RandomNode">
          <nodes>
            <!-- insert description of what the cult wants to do with them
                  need a node for each type 
                -->

            <!-- just mutate them -->
            <li Class="QuestNode_Sequence">

              <selectionWeight>0.5</selectionWeight>
              <nodes>


                <!-- replace description of what the cult wants to do with them -->
                <!-- this is for when the cult just want to mutate them -->
                <li Class="QuestNode_GetRandomElement">
                  <storeAs>dutyDescription</storeAs>
                  <options>
                    <li>[asker_nameDef] assures you that they are only looking to trial some minor, possibly beneficial mutations. This process will take 3 days, and then they will be returned.</li>
                  </options>
                </li>
                <li Class="QuestNode_Set">
                  <name>returnLetterText</name>
                  <value>[convert_nameDef] has returned from [asker_faction_name], slightly more mutated than before.</value>
                </li>
                <li Class="QuestNode_Set">
                  <name>cultRequestType</name>
                  <value>mutatePawn</value>
                </li>
              </nodes>
            </li>
            <!-- transform them into a common animal -->
            <li Class="QuestNode_Sequence">

              <selectionWeight>0.5</selectionWeight>
              <nodes>


                <!-- replace description of what the cult wants to do with them -->
                <!-- this is for when the cult wants to turn the pawn into an animal -->
                <li Class="QuestNode_GetRandomElement">
                  <storeAs>dutyDescription</storeAs>
                  <options>
                    <li>[asker_nameDef] does not provide any context on why they want them.</li>
                  </options>
                </li>
                <li Class="QuestNode_Set">
                  <name>returnLetterText</name>
                  <value>[convert_nameDef] has returned from [asker_faction_name]...though not as they were.</value>
                </li>
                <li Class="QuestNode_Set">
                  <name>cultRequestType</name>
                  <value>transformPawn</value>
                </li>
              </nodes>
            </li>
            <!-- transform them into a chaomorph  -->
            <li Class="QuestNode_Sequence">

              <selectionWeight>0.5</selectionWeight>
              <nodes>


                <!-- replace description of what the cult wants to do with them -->
                <!-- this is for when the cult wants to turn the pawn into a chaomorph -->
                <li Class="QuestNode_GetRandomElement">
                  <storeAs>dutyDescription</storeAs>
                  <options>
                    <li>[asker_nameDef] mentions that you should send a pawn who could be far more useful as something else.</li>
                  </options>
                </li>
                <li Class="QuestNode_Set">
                  <name>returnLetterText</name>
                  <value>[convert_nameDef] has returned from [asker_faction_name]...though not as they were.</value>
                </li>
                <li Class="QuestNode_Set">
                  <name>cultRequestType</name>
                  <value>transformPawnChaomorph</value>
                </li>
              </nodes>
            </li>
          </nodes>
        </li>

        <!-- Calculate days to lend colonists for -->
        <li Class="QuestNode_GetRandomInRangeForChallengeRating">
          <storeAs>lendForDays</storeAs>
          <oneStarRange>1~2</oneStarRange>
          <twoStarRange>1~2</twoStarRange>
          <threeStarRange>1~2</threeStarRange>
          <roundRandom>true</roundRandom>
        </li>

        <!-- Calculate reward from colonistsToLendCount * lendForDays -->
        <!-- replace with constant reward -->
        <li Class="QuestNode_EvaluateSimpleCurve">
          <value>50</value>
          <storeAs>rewardValue</storeAs>
          <curve>
            <points>
              <li>5, 500</li>
              <li>50, 1500</li>
              <li>200, 4000</li>
            </points>
          </curve>
        </li>

        <!-- Shuttle -->
        <li Class="QuestNode_ShuttleDelay">
          <delayTicks>3500</delayTicks>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_GenerateShuttle">
                <storeAs>shuttle</storeAs>
                <dropEverythingIfUnsatisfied>true</dropEverythingIfUnsatisfied>
                <requiredPawns>$convert</requiredPawns>
                <leaveImmediatelyWhenSatisfied>true</leaveImmediatelyWhenSatisfied>
              </li>
              <li Class="QuestNode_SpawnSkyfaller">
                <skyfallerDef>ShuttleIncoming</skyfallerDef>
                <innerThings>$shuttle</innerThings>
                <lookForSafeSpot>True</lookForSafeSpot>
                <factionOfForSafeSpot>$asker</factionOfForSafeSpot>
              </li>
              <li Class="QuestNode_SendShuttleAwayOnCleanup">
                <shuttle>$shuttle</shuttle>
              </li>
              <li Class="QuestNode_Letter">
                <label>Shuttle arrived</label>
                <text>The shuttle has arrived to collect [convert_nameDef].</text>
                <lookTargets>$shuttle</lookTargets>
              </li>
              <li Class="QuestNode_ShuttleLeaveDelay">
                <delayTicks>$(60000)</delayTicks>
                <shuttle>$shuttle</shuttle>
                <inSignalsDisable>
                  <li>shuttle.Destroyed</li>
                  <li>shuttle.SentSatisfied</li>
                  <li>shuttle.SentUnsatisfied</li>
                </inSignalsDisable>
                <node Class="QuestNode_Sequence">
                  <nodes>
                    <li Class="QuestNode_SendShuttleAway">
                      <shuttle>$shuttle</shuttle>
                      <dropEverything>true</dropEverything>
                    </li>
                    <li Class="QuestNode_End">
                      <outcome>Fail</outcome>
                    </li>
                  </nodes>
                </node>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Shuttle destroyed -->
        <li Class="QuestNode_Signal">
          <inSignal>shuttle.Destroyed</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label>Shuttle destroyed</label>
                <text>The shuttle sent to collect colonists has been destroyed.</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Shuttle sent away -->
        <li Class="QuestNode_Signal">
          <inSignal>shuttle.SentSatisfied</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>


              <li Class="QuestNode_LendColonistsToFaction">
                <shuttle>$shuttle</shuttle>
                <lendColonistsToFactionOf>$asker</lendColonistsToFactionOf>
                <returnLentColonistsInTicks>$($lendForDays*60000)</returnLentColonistsInTicks>
                <outSignalComplete>ColonistsReturned</outSignalComplete>
              </li>




              <li Class="QuestNode_SendShuttleAway">
                <shuttle>$shuttle</shuttle>
              </li>


              <li Class="QuestNode_Delay">
                <delayTicks>$(randInt(300,600))</delayTicks>
                <node Class="QuestNode_Sequence">
                  <nodes>
                    <li Class="QuestNode_GiveRewards">
                      <parms>
                        <allowGoodwill>true</allowGoodwill>
                        <allowRoyalFavor>true</allowRoyalFavor>
                      </parms>
                    </li>


              <!-- insert mutation/tf events here -->
              <!-- need to check for change type set above -->
              <li Class="QuestNode_Equal">
                <value1>$cultRequestType</value1>
                <value2>mutatePawn</value2>
                <compareAs>string</compareAs>
                <node Class="PawnmorpherCult.Quests.AddMutationsToPawn">
                  <!-- mutation only  -->
                  <chimera>true</chimera>
                  <!-- pull all morph mutations -->
                  <animalClass>Animal</animalClass>
                  <allowRestricted>true</allowRestricted>
                  <pawn>$convert</pawn>
                </node>
                <elseNode Class="QuestNode_Equal">
                  <!-- transform them into an animal of some sort  -->
                  <value1>$cultRequestType</value1>
                  <value2>transformPawnChaomorph</value2>
                  <compareAs>string</compareAs>
                  <node Class="PawnmorpherCult.Quests.TransformPawn">
                    <!-- chaomorph -->
                    <traderTag>AnimalChaotic</traderTag>
                    <target>$convert</target>
                  </node>
                  <elseNode Class="PawnmorpherCult.Quests.TransformPawn">
                    <!-- regular animal  -->
                    <traderTag>AnimalCommon</traderTag>
                    <target>$convert</target>
                  </elseNode>
                </elseNode>
              </li>

                  </nodes>
                </node>
              </li>


            </nodes>
          </node>
        </li>

        <li Class="QuestNode_Signal">
          <inSignal>ColonistsReturned</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>



              <li Class="QuestNode_Letter">
                <label>Colonists returned</label>
                <text>$returnLetterText</text>
                <letterDef>PositiveEvent</letterDef>
              </li>
              <li Class="QuestNode_End">
                <outcome>Success</outcome>
              </li>
            </nodes>
          </node>
        </li>


        <!-- insert raid spawn after ticks here -->
        <li Class="QuestNode_Signal">
          <inSignal>shuttle.SentUnsatisfied</inSignal>
          <node Class="QuestNode_End">
            <outcome>Fail</outcome>
          </node>
        </li>

      </nodes>
    </root>
  </QuestScriptDef>

</Defs>